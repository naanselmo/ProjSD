package org.komparator.mediator.ws.cli;

import org.komparator.mediator.client.ws.*;
import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;
import org.komparator.security.handler.HandlerManager;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebServiceException;
import java.util.List;
import java.util.Map;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

/**
 * Client.
 * <p>
 * Adds easier endpoint address configuration and
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType {

	/**
	 * WS service
	 */
	MediatorService service = null;

	/**
	 * WS port (port type is the interface, port is the implementation)
	 */
	MediatorPortType port = null;

	/**
	 * UDDI server URL
	 */
	private String uddiURL = null;

	/**
	 * WS name
	 */
	private String wsName = null;

	/**
	 * WS endpoint address
	 */
	private String wsURL = null; // default value is defined inside WSDL

	/**
	 * Reconnect attempts
	 */
	private int reconnectAttempts = 0;

	public String getWsURL() {
		return wsURL;
	}

	/**
	 * output option
	 **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/**
	 * constructor with provided web service URL
	 */
	public MediatorClient(String wsURL) throws MediatorClientException {
		this.wsURL = wsURL;
		createStub();
	}

	/**
	 * constructor with provided UDDI location and name
	 */
	public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
		this.uddiURL = uddiURL;
		this.wsName = wsName;
		uddiLookup();
		createStub();
	}

	/**
	 * UDDI lookup
	 */
	private void uddiLookup() throws MediatorClientException {
		try {
			if (verbose)
				System.out.printf("Contacting UDDI at %s%n", uddiURL);
			UDDINaming uddiNaming = new UDDINaming(uddiURL);

			if (verbose)
				System.out.printf("Looking for '%s'%n", wsName);
			wsURL = uddiNaming.lookup(wsName);

		} catch (Exception e) {
			String msg = String.format("Client failed lookup on UDDI at %s!",
					uddiURL);
			throw new MediatorClientException(msg, e);
		}

		if (wsURL == null) {
			String msg = String.format(
					"Service with name %s not found on UDDI at %s", wsName,
					uddiURL);
			throw new MediatorClientException(msg);
		}
	}

	/**
	 * Service reconnect
	 */
	private Boolean reconnect() {
		try {
			Thread.sleep(MediatorClientConfig.getLongProperty(MediatorClientConfig.PROPERTY_REDUNDANCY_RETRIES_WAIT));
		} catch(InterruptedException ex) {
			Thread.currentThread().interrupt();
		}

		System.out.println("Attempting to reconnect to mediator, for attempt number " + Long.toString(reconnectAttempts) + "/" + Long.toString(MediatorClientConfig.getLongProperty(MediatorClientConfig.PROPERTY_REDUNDANCY_RETRIES_MAX)));

		if (reconnectAttempts++ >= MediatorClientConfig.getLongProperty(MediatorClientConfig.PROPERTY_REDUNDANCY_RETRIES_MAX)) {
			return false;
		}

		try	{
			HandlerManager.getInstance().resetSecretKey();
			uddiLookup();
			createStub();
		} catch (Exception ignored) {
		}

		return true;
	}

	/**
	 * Stub creation and configuration
	 */
	private void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");
		service = new MediatorService();
		port = service.getMediatorPort();

		if (wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address ...");
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider
					.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
		}
	}

	// remote invocation methods ----------------------------------------------

	@Override
	public void clear() {
		while (true) {
			try {
				port.clear();
				reconnectAttempts = 0;
				return;
			} catch (WebServiceException e) {
				e.printStackTrace();
				if (!reconnect()) {
					throw e;
				}
			}
		}
	}

	@Override
	public String ping(String arg0) {
		while (true) {
			try {
				String result = port.ping(arg0);
				reconnectAttempts = 0;
				return result;
			} catch (WebServiceException e) {
				e.printStackTrace();
				if (!reconnect()) {
					throw e;
				}
			}
		}
	}

	@Override
	public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
		while (true) {
			try {
				List<ItemView> result = port.searchItems(descText);
				reconnectAttempts = 0;
				return result;
			} catch (WebServiceException e) {
				e.printStackTrace();
				if (!reconnect()) {
					throw e;
				}
			}
		}
	}

	@Override
	public List<CartView> listCarts() {
		while (true) {
			try {
				List<CartView> result = port.listCarts();
				reconnectAttempts = 0;
				return result;
			} catch (WebServiceException e) {
				e.printStackTrace();
				if (!reconnect()) {
					throw e;
				}
			}
		}
	}

	@Override
	public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
		while (true) {
			try {
				List<ItemView> result = port.getItems(productId);
				reconnectAttempts = 0;
				return result;
			} catch (WebServiceException e) {
				e.printStackTrace();
				if (!reconnect()) {
					throw e;
				}
			}
		}
	}

	@Override
	public ShoppingResultView buyCart(String cartId, String creditCardNr)
			throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
		while (true) {
			try {
				ShoppingResultView result = port.buyCart(cartId, creditCardNr);
				reconnectAttempts = 0;
				return result;
			} catch (WebServiceException e) {
				e.printStackTrace();
				if (!reconnect()) {
					throw e;
				}
			}
		}
	}

	@Override
	public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
			InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
		while (true) {
			try {
				port.addToCart(cartId, itemId, itemQty);
				reconnectAttempts = 0;
				return;
			} catch (WebServiceException e) {
				e.printStackTrace();
				if (!reconnect()) {
					throw e;
				}
			}
		}
	}

	@Override
	public List<ShoppingResultView> shopHistory() {
		while (true) {
			try {
				List<ShoppingResultView> result = port.shopHistory();
				reconnectAttempts = 0;
				return result;
			} catch (WebServiceException e) {
				e.printStackTrace();
				if (!reconnect()) {
					throw e;
				}
			}
		}
	}

	@Override
	public void imAlive() {
		port.imAlive();
	}

	@Override
	public void updateCart(String cartId, ItemView item, int itemQty) {
		port.updateCart(cartId, item, itemQty);
	}

	@Override
	public void updateShopHistory(ShoppingResultView shoppingResult) {
		port.updateShopHistory(shoppingResult);
	}

}
